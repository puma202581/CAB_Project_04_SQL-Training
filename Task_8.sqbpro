<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Task_8.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1591"/><column_width id="4" width="0"/><expanded_item id="13" parent="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Department" custom_title="0" dock_id="1" table="4,10:mainDepartment"/><dock_state state="000000ff00000000fd00000001000000020000033b00000224fc0100000001fb000000160064006f0063006b00420072006f007700730065003101000000000000033b0000015c00ffffff0000033b0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Affiliated_With" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="61"/><column index="2" value="75"/><column index="3" value="106"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Appointment" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="94"/><column index="2" value="108"/><column index="3" value="66"/><column index="4" value="61"/><column index="5" value="148"/><column index="6" value="156"/><column index="7" value="110"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Block" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="37"/><column index="2" value="36"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Department" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="88"/><column index="2" value="132"/><column index="3" value="37"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Medication" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="36"/><column index="2" value="101"/><column index="3" value="171"/><column index="4" value="71"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Nurse" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="76"/><column index="2" value="124"/><column index="3" value="85"/><column index="4" value="68"/><column index="5" value="78"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="On_Call" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="41"/><column index="2" value="67"/><column index="3" value="66"/><column index="4" value="132"/><column index="5" value="132"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Patient" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="78"/><column index="2" value="140"/><column index="3" value="148"/><column index="4" value="70"/><column index="5" value="78"/><column index="6" value="30"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Physician" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="76"/><column index="2" value="140"/><column index="3" value="226"/><column index="4" value="78"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Prescribes" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="61"/><column index="2" value="78"/><column index="3" value="69"/><column index="4" value="132"/><column index="5" value="80"/><column index="6" value="36"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Procedures" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="36"/><column index="2" value="241"/><column index="3" value="62"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Room" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="53"/><column index="2" value="54"/><column index="3" value="67"/><column index="4" value="66"/><column index="5" value="73"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Stay" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="47"/><column index="2" value="78"/><column index="3" value="41"/><column index="4" value="85"/><column index="5" value="85"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Trained_In" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="0" mode="0"/></sort><column_widths><column index="1" value="61"/><column index="2" value="66"/><column index="3" value="103"/><column index="4" value="117"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Undergoes" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="78"/><column index="2" value="65"/><column index="3" value="39"/><column index="4" value="85"/><column index="5" value="61"/><column index="6" value="91"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Create_Fill">-- Create tables

CREATE TABLE Physician (
  EmployeeID INTEGER NOT NULL,
  Name TEXT NOT NULL,
  Position TEXT NOT NULL,
  SSN INTEGER NOT NULL,
  PRIMARY KEY (EmployeeID)
); 

CREATE TABLE Department (
  DepartmentID INTEGER NOT NULL,
  Name TEXT NOT NULL,
  Head INTEGER NOT NULL,
  PRIMARY KEY (DepartmentID)
);

CREATE TABLE Affiliated_With (
  Physician INTEGER NOT NULL,
  Department INTEGER NOT NULL,
  PrimaryAffiliation BOOLEAN NOT NULL,
  PRIMARY KEY(Physician, Department)
);

CREATE TABLE Procedures (
  Code INTEGER NOT NULL,
  Name TEXT NOT NULL,
  Cost REAL NOT NULL,
  PRIMARY KEY (Code)
);

CREATE TABLE Trained_In (
  Physician INTEGER NOT NULL,
  Treatment INTEGER NOT NULL,
  CertificationDate DATETIME NOT NULL,
  CertificationExpires DATETIME NOT NULL,
  PRIMARY KEY(Physician, Treatment)
);

CREATE TABLE Patient (
  SSN INTEGER NOT NULL,
  Name TEXT NOT NULL,
  Address TEXT NOT NULL,
  Phone TEXT NOT NULL,
  InsuranceID INTEGER NOT NULL,
  PCP INTEGER NOT NULL,
  PRIMARY KEY (SSN)
);

CREATE TABLE Nurse (
  EmployeeID INTEGER NOT NULL,
  Name TEXT NOT NULL,
  Position TEXT NOT NULL,
  Registered BOOLEAN NOT NULL,
  SSN INTEGER NOT NULL,
  PRIMARY KEY (EmployeeID)
);

CREATE TABLE Appointment (
  AppointmentID INTEGER NOT NULL,
  Patient INTEGER NOT NULL,
  PrepNurse INTEGER,
  Physician INTEGER NOT NULL,
  Start DATETIME NOT NULL,
  End DATETIME NOT NULL,
  ExaminationRoom TEXT NOT NULL,
  PRIMARY KEY (AppointmentID)
);

CREATE TABLE Medication (
  Code INTEGER NOT NULL,
  Name TEXT NOT NULL,
  Brand TEXT NOT NULL,
  Description TEXT NOT NULL,
  PRIMARY KEY(Code)
);

CREATE TABLE Prescribes (
  Physician INTEGER NOT NULL,
  Patient INTEGER NOT NULL,
  Medication INTEGER NOT NULL,
  Date DATETIME NOT NULL,
  Appointment INTEGER,
  Dose TEXT NOT NULL,
  PRIMARY KEY(Physician, Patient, Medication, Date)
);

CREATE TABLE Block (
  Floor INTEGER NOT NULL,
  Code INTEGER NOT NULL,
  PRIMARY KEY(Floor, Code)
); 

CREATE TABLE Room (
  Number INTEGER NOT NULL,
  Type TEXT NOT NULL,
  BlockFloor INTEGER NOT NULL,
  BlockCode INTEGER NOT NULL,
  Unavailable BOOLEAN NOT NULL,
  PRIMARY KEY(Number)
);

CREATE TABLE On_Call (
  Nurse INTEGER NOT NULL,
  BlockFloor INTEGER NOT NULL,
  BlockCode INTEGER NOT NULL,
  Start DATETIME NOT NULL,
  End DATETIME NOT NULL,
  PRIMARY KEY(Nurse, BlockFloor, BlockCode, Start, End)
);

CREATE TABLE Stay (
  StayID INTEGER NOT NULL,
  Patient INTEGER NOT NULL,
  Room INTEGER NOT NULL,
  Start DATETIME NOT NULL,
  End DATETIME NOT NULL,
  PRIMARY KEY(StayID)
);

CREATE TABLE Undergoes (
  Patient INTEGER NOT NULL,
  Procedure INTEGER NOT NULL,
  Stay INTEGER NOT NULL,
  Date DATETIME NOT NULL,
  Physician INTEGER NOT NULL,
  AssistingNurse INTEGER,
  PRIMARY KEY(Patient, Procedure, Stay, Date)
);


-- Fill tables

INSERT INTO Physician VALUES
(1,'John Dorian','Staff Internist',111111111),
(2,'Elliot Reid','Attending Physician',222222222),
(3,'Christopher Turk','Surgical Attending Physician',333333333),
(4,'Percival Cox','Senior Attending Physician',444444444),
(5,'Bob Kelso','Head Chief of Medicine',555555555),
(6,'Todd Quinlan','Surgical Attending Physician',666666666),
(7,'John Wen','Surgical Attending Physician',777777777),
(8,'Keith Dudemeister','MD Resident',888888888),
(9,'Molly Clock','Attending Psychiatrist',999999999);

INSERT INTO Department VALUES
(1,'General Medicine',4),
(2,'Surgery',7),
(3,'Psychiatry',9);

INSERT INTO Affiliated_With VALUES
(1,1,1),
(2,1,1),
(3,1,0),
(3,2,1),
(4,1,1),
(5,1,1),
(6,2,1),
(7,1,0),
(7,2,1),
(8,1,1),
(9,3,1);

INSERT INTO Procedures VALUES
(1,'Reverse Rhinopodoplasty',1500.0),
(2,'Obtuse Pyloric Recombobulation',3750.0),
(3,'Folded Demiophtalmectomy',4500.0),
(4,'Complete Walletectomy',10000.0),
(5,'Obfuscated Dermogastrotomy',4899.0),
(6,'Reversible Pancreomyoplasty',5600.0),
(7,'Follicular Demiectomy',25.0);

INSERT INTO Patient VALUES
(100000001,'John Smith','42 Foobar Lane','555-0256',68476213,1),
(100000002,'Grace Ritchie','37 Snafu Drive','555-0512',36546321,2),
(100000003,'Random J. Patient','101 Omgbbq Street','555-1204',65465421,2),
(100000004,'Dennis Doe','1100 Foobaz Avenue','555-2048',68421879,3);

INSERT INTO Nurse VALUES
(101,'Carla Espinosa','Head Nurse',1,111111110),
(102,'Laverne Roberts','Nurse',1,222222220),
(103,'Paul Flowers','Nurse',0,333333330);

INSERT INTO Appointment VALUES
(13216584,100000001,101,1,'2008-04-24 10:00','2008-04-24 11:00','A'),
(26548913,100000002,101,2,'2008-04-24 10:00','2008-04-24 11:00','B'),
(36549879,100000001,102,1,'2008-04-25 10:00','2008-04-25 11:00','A'),
(46846589,100000004,103,4,'2008-04-25 10:00','2008-04-25 11:00','B'),
(59871321,100000004,NULL,4,'2008-04-26 10:00','2008-04-26 11:00','C'),
(69879231,100000003,103,2,'2008-04-26 11:00','2008-04-26 12:00','C'),
(76983231,100000001,NULL,3,'2008-04-26 12:00','2008-04-26 13:00','C'),
(86213939,100000004,102,9,'2008-04-27 10:00','2008-04-21 11:00','A'),
(93216548,100000002,101,2,'2008-04-27 10:00','2008-04-27 11:00','B');

INSERT INTO Medication VALUES
(1,'Procrastin-X','X','N/A'),
(2,'Thesisin','Foo Labs','N/A'),
(3,'Awakin','Bar Laboratories','N/A'),
(4,'Crescavitin','Baz Industries','N/A'),
(5,'Melioraurin','Snafu Pharmaceuticals','N/A');

INSERT INTO Prescribes VALUES
(1,100000001,1,'2008-04-24 10:47',13216584,'5'),
(9,100000004,2,'2008-04-27 10:53',86213939,'10'),
(9,100000004,2,'2008-04-30 16:53',NULL,'5');

INSERT INTO Block VALUES
(1,1),
(1,2),
(1,3),
(2,1),
(2,2),
(2,3),
(3,1),
(3,2),
(3,3),
(4,1),
(4,2),
(4,3);

INSERT INTO Room VALUES
(101,'Single',1,1,0),
(102,'Single',1,1,0),
(103,'Single',1,1,0),
(111,'Single',1,2,0),
(112,'Single',1,2,1),
(113,'Single',1,2,0),
(121,'Single',1,3,0),
(122,'Single',1,3,0),
(123,'Single',1,3,0),
(201,'Single',2,1,1),
(202,'Single',2,1,0),
(203,'Single',2,1,0),
(211,'Single',2,2,0),
(212,'Single',2,2,0),
(213,'Single',2,2,1),
(221,'Single',2,3,0),
(222,'Single',2,3,0),
(223,'Single',2,3,0),
(301,'Single',3,1,0),
(302,'Single',3,1,1),
(303,'Single',3,1,0),
(311,'Single',3,2,0),
(312,'Single',3,2,0),
(313,'Single',3,2,0),
(321,'Single',3,3,1),
(322,'Single',3,3,0),
(323,'Single',3,3,0),
(401,'Single',4,1,0),
(402,'Single',4,1,1),
(403,'Single',4,1,0),
(411,'Single',4,2,0),
(412,'Single',4,2,0),
(413,'Single',4,2,0),
(421,'Single',4,3,1),
(422,'Single',4,3,0),
(423,'Single',4,3,0);

INSERT INTO On_Call VALUES
(101,1,1,'2008-11-04 11:00','2008-11-04 19:00'),
(101,1,2,'2008-11-04 11:00','2008-11-04 19:00'),
(102,1,3,'2008-11-04 11:00','2008-11-04 19:00'),
(103,1,1,'2008-11-04 19:00','2008-11-05 03:00'),
(103,1,2,'2008-11-04 19:00','2008-11-05 03:00'),
(103,1,3,'2008-11-04 19:00','2008-11-05 03:00');

INSERT INTO Stay VALUES
(3215,100000001,111,'2008-05-01','2008-05-04'),
(3216,100000003,123,'2008-05-03','2008-05-14'),
(3217,100000004,112,'2008-05-02','2008-05-03');

INSERT INTO Undergoes VALUES
(100000001,6,3215,'2008-05-02',3,101),
(100000001,2,3215,'2008-05-03',7,101),
(100000004,1,3217,'2008-05-07',3,102),
(100000004,5,3217,'2008-05-09',6,NULL),
(100000001,7,3217,'2008-05-10',7,101),
(100000004,4,3217,'2008-05-13',3,103);

INSERT INTO Trained_In VALUES
(3,1,'2008-01-01','2008-12-31'),
(3,2,'2008-01-01','2008-12-31'),
(3,5,'2008-01-01','2008-12-31'),
(3,6,'2008-01-01','2008-12-31'),
(3,7,'2008-01-01','2008-12-31'),
(6,2,'2008-01-01','2008-12-31'),
(6,5,'2007-01-01','2007-12-31'),
(6,6,'2008-01-01','2008-12-31'),
(7,1,'2008-01-01','2008-12-31'),
(7,2,'2008-01-01','2008-12-31'),
(7,3,'2008-01-01','2008-12-31'),
(7,4,'2008-01-01','2008-12-31'),
(7,5,'2008-01-01','2008-12-31'),
(7,6,'2008-01-01','2008-12-31'),
(7,7,'2008-01-01','2008-12-31');

</sql><sql name="8.1*">-- Select the names of all physicians that have performed a medical procedure 
-- they have never been certified to perform.


-- Step01 - Identify Combination Physican and Procedure 
SELECT Undergoes.Physician, Undergoes.Procedure
FROM Undergoes
ORDER BY Undergoes.Physician

-- Step02 - Identify Certification Date for each procedure --&gt; Attention: Result 6-5 Combo should be 2007!
SELECT DISTINCT Undergoes.Physician, Undergoes.Procedure, Trained_In.CertificationDate
FROM Undergoes
LEFT JOIN Trained_In ON Trained_In.Physician=Undergoes.Physician
WHERE Trained_in.CertificationDate = &quot;2008-01-01&quot;
ORDER BY Undergoes.Physician


-- Idea: Maybe smarter to limit table Trained_In to 2008 dates and then tried to find combo Physician/Procedure...
SELECT *
FROM Trained_In
WHERE Physician AND Treatment NOT IN ( 
SELECT Undergoes.Physician, Undergoes.Procedure
FROM Undergoes
ORDER BY Undergoes.Physician
);

-- MAybe continue with WHERE EXISTS


-- Try with CONCATENATE
-- Step01 : Build Combon in Undergoes
SELECT Undergoes.Physician, Undergoes.Procedure, SUBSTR(Undergoes.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Undergoes.Procedure, 1, 1) AS PP_combo_1
FROM Undergoes
ORDER BY Undergoes.Physician

-- Step02 : Build Combon in table Trained_In
SELECT Trained_In.Physician, Trained_In.Treatment, SUBSTR(Trained_In.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Trained_In.Treatment, 1, 1) AS PP_combo_2
FROM Trained_In
ORDER BY Trained_In.Physician

-- Step03 : MERGE both Combos with WHERE IN
SELECT Trained_In.Physician, Trained_In.Treatment, Trained_In.CertificationExpires, SUBSTR(Trained_In.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Trained_In.Treatment, 1, 1) AS PP_combo_2
FROM Trained_In
WHERE PP_combo_2 in (
	SELECT SUBSTR(Undergoes.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Undergoes.Procedure, 1, 1) AS PP_combo_1
	FROM Undergoes
)
ORDER BY Trained_In.Physician


-- Step04 : I have to do it the other way around + JOIN 
SELECT Undergoes.Physician, Undergoes.Procedure, SUBSTR(Undergoes.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Undergoes.Procedure, 1, 1) AS PP_combo_1
FROM Undergoes
WHERE PP_combo_1 NOT IN (
	SELECT SUBSTR(Trained_In.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Trained_In.Treatment, 1, 1) AS PP_combo_2
	FROM Trained_In
)
ORDER BY Undergoes.Physician


-- Step 05: JOIN name of physician 
SELECT Undergoes.Physician, Physician.Name, Undergoes.Procedure, SUBSTR(Undergoes.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Undergoes.Procedure, 1, 1) AS PP_combo_1
FROM Undergoes
LEFT JOIN Physician ON Physician.EmployeeID=Undergoes.Physician
WHERE PP_combo_1 NOT IN (
	SELECT SUBSTR(Trained_In.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Trained_In.Treatment, 1, 1) AS PP_combo_2
	FROM Trained_In
)
ORDER BY Undergoes.Physician


-- Solution from LMS
SELECT Name FROM Physician 
JOIN Undergoes ON Undergoes.Physician = Physician.EmployeeID 
WHERE Undergoes.Procedure NOT IN (
	SELECT Treatment FROM Trained_In WHERE Trained_In.Physician = Physician.EmployeeID
);
</sql><sql name="8.2">-- Same as the previous query, but include the following information in the results: 
-- Physician name, name of procedure, 
-- date when the procedure was carried out, 
-- name of the patient the procedure was carried out on.


SELECT Physician.Name AS Physician_Name, Procedures.Name AS Procedure_Name, Undergoes.Date, Patient.Name AS Patient_Name, 
	   SUBSTR(Undergoes.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Undergoes.Procedure, 1, 1) AS PP_combo_1
FROM Undergoes
LEFT JOIN Physician ON Physician.EmployeeID=Undergoes.Physician
LEFT JOIN Patient ON Patient.SSN = Undergoes.Patient
LEFT JOIN Procedures ON Procedures.Code = Undergoes.Procedure
WHERE PP_combo_1 NOT IN (
	SELECT SUBSTR(Trained_In.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Trained_In.Treatment, 1, 1) AS PP_combo_2
	FROM Trained_In
)
ORDER BY Undergoes.Physician

</sql><sql name="8.3">-- Select the names of all physicians that have performed a medical procedure that they are certified
-- to perform, but the procedure was performed at a date (Undergoes.Date) after the physician's 
-- certification expired (Trained_In.CertificationExpires).


SELECT Physician.Name AS Physician_Name, Procedures.Name AS Procedure_Name, Undergoes.Date, Patient.Name AS Patient_Name, 
	   SUBSTR(Undergoes.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Undergoes.Procedure, 1, 1) AS PP_combo_1
FROM Undergoes
LEFT JOIN Physician ON Physician.EmployeeID = Undergoes.Physician
LEFT JOIN Patient ON Patient.SSN = Undergoes.Patient
LEFT JOIN Procedures ON Procedures.Code = Undergoes.Procedure
LEFT JOIN Trained_In ON Trained_In.Physician = Undergoes.Physician
WHERE PP_combo_1 IN (
	SELECT SUBSTR(Trained_In.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Trained_In.Treatment, 1, 1) AS PP_combo_2
	FROM Trained_In
) AND Undergoes.Date &gt; Trained_in.CertificationExpires
ORDER BY Undergoes.Physician
</sql><sql name="8.4">-- Same as the previous query, but include the following information in the results: 
-- Physician name, name of procedure, date when the procedure was carried out, 
-- name of the patient the procedure was carried out on, and date when the certification expired.


SELECT Physician.Name AS Physician_Name, Procedures.Name AS Procedure_Name, Undergoes.Date, Patient.Name AS Patient_Name, 
	   Trained_In.CertificationExpires, 
	   SUBSTR(Undergoes.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Undergoes.Procedure, 1, 1) AS PP_combo_1
FROM Undergoes
LEFT JOIN Physician ON Physician.EmployeeID = Undergoes.Physician
LEFT JOIN Patient ON Patient.SSN = Undergoes.Patient
LEFT JOIN Procedures ON Procedures.Code = Undergoes.Procedure
LEFT JOIN Trained_In ON Trained_In.Physician = Undergoes.Physician
WHERE PP_combo_1 IN (
	SELECT SUBSTR(Trained_In.Physician, 1, 1) || 'Phy-Pro' || SUBSTR(Trained_In.Treatment, 1, 1) AS PP_combo_2
	FROM Trained_In
) AND Undergoes.Date &gt; Trained_in.CertificationExpires
ORDER BY Undergoes.Physician
</sql><sql name="8.5*">-- Select the information for appointments where a patient met with a physician 
-- other than his/her primary care physician. 
-- Show the following information: Patient name, physician name, nurse name (if any), 
-- start and end time of appointment, examination room, and 
-- the name of the patient's primary care physician.

-- INFO: PCP in table Patient stands for Primary Care Physician 

-- Identify name of PCP
-- What do I want to do :
-- 1 Gather the PCP Numbers only
-- 2 Pass them in table with Physicians and names to get out names


SELECT Physician.Name
FROM Physician
LEFT JOIN Patient ON Patient.PCP = Physician.EmployeeID




-- WORKS FINE, but last step, i.e. get name of PCP is not yet in
SELECT Patient.Name AS Patient_Name, Physician.Name AS Physician_Name, Nurse.Name AS Nurse_Name, 
	   Appointment.Start, Appointment.End, Appointment.ExaminationRoom, 
	   Patient.PCP AS Primary_Care_Physician
FROM Appointment
LEFT JOIN Physician ON Physician.EmployeeID = Appointment.Physician
LEFT JOIN Patient ON Patient.SSN = Appointment.Patient
LEFT JOIN Nurse ON Nurse.EmployeeID  = Appointment.PrepNurse
WHERE Appointment.Physician != Patient.PCP


-- Trial for getting name of PCP - DOES NOT WORK YET, Returns always same doctor
SELECT Patient.Name AS Patient_Name, Physician.Name AS Physician_Name, Nurse.Name AS Nurse_Name, 
	   Appointment.Start, Appointment.End, Appointment.ExaminationRoom, 
	   (
	   SELECT Physician.Name
	   FROM Patient
	   LEFT JOIN Physician ON Physician.EmployeeID = Patient.PCP
	   WHERE Patient.PCP=Physician.EmployeeID
	   ) AS Primary_Care_Physician
FROM Appointment
LEFT JOIN Physician ON Physician.EmployeeID = Appointment.Physician
LEFT JOIN Patient ON Patient.SSN = Appointment.Patient
LEFT JOIN Nurse ON Nurse.EmployeeID  = Appointment.PrepNurse
WHERE Appointment.Physician != Patient.PCP

-- What do I want Patient.PCP goes in and Physician.Name comes out

SELECT Physician.Name
FROM Patient
LEFT JOIN Physician ON Physician.EmployeeID = Patient.PCP
WHERE Patient.PCP=Physician.EmployeeID



SELECT Patient.Name, Patient.PCP, Physician.EmployeeID, Physician.Name
FROM Patient
LEFT JOIN Physician ON Physician.EmployeeID = Patient.PCP
ORDER BY Patient.Name


-- LMS Solution
SELECT
	Patient.Name Patient_Name,
	Assisting_Physician.Name Physician_Name,
	Nurse.Name Nurse_Name,
	Appointment.Start,
	Appointment.End,
	Appointment.ExaminationRoom,
	Primary_Physician.Name Primary_Physician
FROM Patient
JOIN Appointment ON Patient.SSN = Appointment.Patient
JOIN Physician AS Assisting_Physician ON Assisting_Physician.EmployeeID = Appointment.Physician
JOIN Physician AS Primary_Physician ON Primary_Physician.EmployeeID = Patient.PCP 
LEFT JOIN Nurse ON Appointment.PrepNurse = Nurse.EmployeeID
WHERE NOT Patient.PCP = Appointment.Physician;
-- WHERE Patient.pcp &lt;&gt; Appointment.Physician;
</sql><sql name="8.6">-- The Patient field in Undergoes is redundant, since we can obtain it from the Stay table. 
-- There are no constraints in force to prevent inconsistencies between these two tables. 
-- More specifically, the Undergoes table may include a row where the patient ID does not match 
-- the one we would obtain from the Stay table through the Undergoes (Stay foreign key)

-- Select all rows from Undergoes that exhibit this inconsistency.

-- I will use below in 'WHERE IN' OF MAIN QUERY
SELECT Stay.StayID, Stay.Patient, 
	   SUBSTR(Stay.StayID, 1, 4) || '-' || SUBSTR(Stay.Patient, 1, 9) AS SP_combo_1
FROM Stay


SELECT *, SUBSTR(Undergoes.Stay, 1, 4) || '-' || SUBSTR(Undergoes.Patient, 1, 9) AS StPa_combo
FROM Undergoes
LEFT JOIN Stay ON Stay.StayID = Undergoes.Stay
WHERE StPa_Combo NOT IN (
	SUBSTR(Stay.StayID, 1, 4) || '-' || SUBSTR(Stay.Patient, 1, 9)
);

</sql><sql name="8.7">-- Select the names of all the nurses who have ever been on call for room 123.


-- table 'Room' has (room) Number and Block, BlockFloor and BlockCode
-- table 'On_Call' has Nurse, BlockFloor and BlockCode and duty times
-- table 'Nurse' has (Nurse) Names
-- Room 123 is on BlockFloor = 1 and BlockCode = 3

-- with proof of details
SELECT On_Call.Nurse, Nurse.Name, On_Call.BlockFloor, On_Call.BlockCode
FROM On_Call
LEFT JOIN Room ON Room.BlockCode=On_Call.BlockCode
LEFT JOIN Nurse ON Nurse.EmployeeID=On_Call.Nurse
WHERE Room.Number = 123
GROUP BY On_Call.Nurse


-- just names
SELECT Nurse.Name
FROM On_Call
LEFT JOIN Room ON Room.BlockCode=On_Call.BlockCode
LEFT JOIN Nurse ON Nurse.EmployeeID=On_Call.Nurse
WHERE Room.Number = 123
GROUP BY On_Call.Nurse;</sql><sql name="8.8">-- The hospital has several examination rooms where appointments take place. 
-- Obtain the number of appointments that have taken place in each examination room.

SELECT Appointment.ExaminationRoom, COUNT(Appointment.AppointmentID) AS Count_of_Appointments
FROM Appointment
GROUP BY ExaminationRoom</sql><sql name="8.9">-- (1)
-- Select the names of all patients, and the name of their primary care physicians.

SELECT DISTINCT Patient.Name AS Patient_Name, Physician.Name AS PCP_Name
FROM Patient
LEFT JOIN Physician ON Physician.EmployeeID = Patient.PCP
WHERE Patient.PCP = Physician.EmployeeID

-- (2)
-- Do the same, but only for patients that have been prescribed 
-- some medication by his/her primary care physician.

-- Step01 : Build Combo Precibe for Patient_Physician
SELECT *, SUBSTR(Prescribes.Patient, 1, 9) || '-' || SUBSTR(Prescribes.Physician, 1, 1) AS Prescribes_combo
FROM Prescribes

-- Last Step FINAL Query
SELECT DISTINCT Patient.Name AS Patient_Name, Physician.Name AS PCP_Name, 
	   (
	   SUBSTR(Patient.SSN, 1, 9) || '-' || SUBSTR(Physician.EmployeeID, 1, 1)
	   ) AS PCP_combo
FROM Patient
LEFT JOIN Physician ON Physician.EmployeeID = Patient.PCP
WHERE Patient.PCP = Physician.EmployeeID 
AND PCP_combo IN (
	   SELECT (
			SUBSTR(Prescribes.Patient, 1, 9) || '-' || SUBSTR(Prescribes.Physician, 1, 1)
			  )
	   FROM Prescribes
	   );


-- (3)
-- Now only for patients that have undergone a procedure with a cost larger that $5,000.
SELECT Patient_Name, PCP_Name
FROM
(
SELECT DISTINCT Patient.Name AS Patient_Name, Physician.Name AS PCP_Name
FROM Patient
LEFT JOIN Physician ON Physician.EmployeeID = Patient.PCP
LEFT JOIN Undergoes ON Undergoes.Patient = Patient.SSN
LEFT JOIN Procedures ON Procedures.Code = Undergoes.Procedure
WHERE Patient.PCP = Physician.EmployeeID AND Procedures.Cost &gt; 5000
);


-- [4]
-- Now only for patients that have had at least two appointments 
-- where the nurse who prepared the appointment was a registered nurse.

-- Step 1 COUNT of Appointments 'by registered nurses only' -&gt; WINDOW
SELECT Appointment.Patient, COUNT(Appointment.AppointmentID) AS Count_Appointments
FROM Appointment
LEFT JOIN Nurse ON Nurse.EmployeeID = Appointment.PrepNurse
WHERE Nurse.Registered = 1
GROUP BY Appointment.Patient

-- Final Step:
SELECT Patient.Name AS Patient_Name, Physician.Name AS PCP_Name, COUNT(Appointment.AppointmentID) AS Count_Appointments
FROM Appointment
LEFT JOIN Nurse ON Nurse.EmployeeID = Appointment.PrepNurse
LEFT JOIN Patient ON Patient.SSN = Appointment.Patient
LEFT JOIN Physician ON Physician.EmployeeID = Patient.PCP
WHERE Patient.PCP = Physician.EmployeeID AND Nurse.Registered = 1
GROUP BY Appointment.Patient
HAVING Count_Appointments &gt; 1;



-- (5)
-- Now only for patients whose primary care physician is not the head of any department.
SELECT DISTINCT Patient.Name AS Patient_Name, Physician.Name AS PCP_Name
FROM Patient
LEFT JOIN Physician ON Physician.EmployeeID = Patient.PCP
LEFT JOIN Department ON Department.Head = Patient.PCP
WHERE Patient.PCP = Physician.EmployeeID AND Patient.PCP NOT IN (SELECT Department.Head FROM Department)


</sql><current_tab id="5"/></tab_sql></sqlb_project>
