<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Task_3.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="904"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Warehouses" custom_title="0" dock_id="1" table="4,10:mainWarehouses"/><dock_state state="000000ff00000000fd00000001000000020000024800000213fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000002480000011800ffffff000002480000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Boxes" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="39"/><column index="2" value="70"/><column index="3" value="46"/><column index="4" value="71"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Warehouses" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="107"/><column index="2" value="146"/><column index="3" value="56"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Task_3.sql" filename="C:/Users/MP_Laptop/Desktop/VS-Code_Bootcamp/CAB_Project_04_SQL-Training/Task_3.sql">-- Reference to file &quot;C:/Users/MP_Laptop/Desktop/VS-Code_Bootcamp/CAB_Project_04_SQL-Training/Task_3.sql&quot; (not supported by this version) --</sql><sql name="3.1">-- Select all warehouses.

SELECT DISTINCT *
FROM Warehouses;</sql><sql name="3.2">-- Select all boxes with a value larger than $150.

SELECT *
FROM Boxes
WHERE value &gt; 150;</sql><sql name="3.3">-- Select all distinct contents in all the boxes.

SELECT DISTINCT Contents
FROM Boxes;</sql><sql name="3.4">-- Select the average value of all boxes.

SELECT AVG(Value)
FROM Boxes;</sql><sql name="3.5">-- Select the warehouse code and the average value of the boxes in each warehouse.


SELECT Warehouse, AVG(Value)
FROM Boxes
GROUP BY Warehouse;</sql><sql name="3.6">-- Same as Task 3.5, but select only the warehouses 
-- where the average value of the boxes is greater than 150.

SELECT Warehouse, AVG(Value)
FROM Boxes
GROUP BY Warehouse
HAVING AVG(Value) &gt; 150;</sql><sql name="3.7">-- Select the code of each box, along with the location of the warehouse the box is located in.

SELECT Boxes.Code, Location
FROM Boxes
LEFT JOIN Warehouses ON Warehouses.Code = Boxes.Warehouse;</sql><sql name="3.8_?">-- Select the warehouse codes, along with the number of boxes in each warehouse.

-- In solution column header different!

SELECT Warehouse, count(Code)
FROM Boxes
GROUP BY Warehouse;</sql><sql name="3.9">-- Select the codes of all warehouses that are saturated (a warehouse is saturated 
-- if the number of boxes stored is larger than the warehouse capacity).


ALTER TABLE Warehouses 
RENAME COLUMN Code TO Code_WH;


SELECT Warehouse, Warehouses.Capacity, count(Code)
FROM Boxes
LEFT JOIN Warehouses ON Warehouses.Code_WH = Boxes.Warehouse
GROUP BY Warehouse
HAVING count(Code) &gt; Capacity;
</sql><sql name="3.10">-- Select the codes of all boxes in the warehouse located in Chicago.

SELECT Warehouses.Location, Code
FROM Boxes
LEFT JOIN Warehouses ON Warehouses.Code_WH = Boxes.Warehouse
WHERE Warehouses.Location = 'Chicago';</sql><sql name="3.11">-- Create a new warehouse in New York with a capacity for 3 boxes.


INSERT INTO Warehouses (Code_WH, Location, Capacity) 
VALUES (6, 'New York', 3);</sql><sql name="3.12">-- Create a new box with code &quot;H5RT&quot;, containing &quot;Papers&quot; 
-- with a value of $200, and located in warehouse 2.


INSERT INTO Boxes (Code, Contents, Value, Warehouse) 
VALUES ('H5RT', 'Papers', 200, 2);</sql><sql name="3.13">-- Reduce the value of all boxes by 15%.


UPDATE Boxes
SET Value = Value * 0.85;

SELECT *
FROM Boxes;
 </sql><sql name="3.14_?">-- Delete all records of boxes from saturated warehouses.

-- Below deleted all box records!
-- Knowing that it is location '1', I could shortcut...

DELETE
FROM Boxes
WHERE (
	SELECT count(Code)
	FROM Boxes
	LEFT JOIN Warehouses ON Warehouses.Code_WH = Boxes.Warehouse
	GROUP BY Warehouse
	HAVING count(Code) &gt; Warehouses.Capacity
);


-- Shortcut, but not executed

DELETE
FROM Boxes
WHERE Warehouse = 1;
 </sql><sql name="3.15">-- Remove all boxes with a value lower than $100.

DELETE
FROM Boxes
WHERE Value &lt; 100;


SELECT *
FROM Boxes;</sql><sql name="3.16">-- Add an Index for column &quot;Warehouse&quot; in the Boxes table 
-- (NOTE: indexes should NOT be used on small tables in practice).

CREATE INDEX index_wh 
ON Boxes(Warehouse)</sql><sql name="3.17">-- Print all existing indexes

SELECT 
  type,
  name,
  tbl_name,
  rootpage,
  sql
FROM sqlite_master 
WHERE type = 'index';</sql><sql name="3.18_?">-- Drop the index you just created

DROP INDEX index_wh;

-- DROP INDEX [IF EXISTS] index_name; --&gt; IF EXISTS DID NOT WORK. WHY?</sql><current_tab id="17"/></tab_sql></sqlb_project>
