<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Task_4.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="705"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="MovieTheaters" custom_title="0" dock_id="1" table="4,13:mainMovieTheaters"/><dock_state state="000000ff00000000fd0000000100000002000003c900000226fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000003c90000011800ffffff000002580000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="MovieTheaters" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="60"/><column index="2" value="85"/><column index="3" value="41"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Movies" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="36"/><column index="2" value="197"/><column index="3" value="152"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Create_Fill">-- Create tables

CREATE TABLE IF NOT EXISTS Movies (
	Code INTEGER,
	Title TEXT NOT NULL,
	Rating TEXT,
	PRIMARY KEY (Code)
);


CREATE TABLE IF NOT EXISTS MovieTheaters (
	Code INTEGER,
	Name TEXT NOT NULL,
	Movie INTEGER,
	PRIMARY KEY (Code)
);


-- Fill the tables

INSERT INTO Movies (Code, Title, Rating) VALUES 
    (1, 'Citizen Kane', 'PG'),
    (2, 'Singin'' in the Rain', 'G'),
    (3, 'The Wizard of Oz', 'G'),
    (4, 'The Quiet Man', NULL),
    (5, 'North by Northwest', NULL),
    (6, 'The Last Tango in Paris', 'NC-17'),
    (7, 'Some Like it Hot', 'PG-13'),
    (8, 'A Night at the Opera', NULL);


INSERT INTO MovieTheaters (Code, Name, Movie) VALUES
    (1, 'Odeon', 5),
    (2, 'Imperial', 1),
    (3, 'Majestic', NULL),
    (4, 'Royale', 6),
    (5, 'Paraiso', 3),
    (6, 'Nikelodeon', NULL);
</sql><sql name="4.1">-- Select the titles of all movies.

SELECT DISTINCT Title
FROM Movies</sql><sql name="4.2">-- Show all the distinct ratings in the database.

SELECT DISTINCT Rating
FROM Movies
ORDER BY Rating</sql><sql name="4.3">-- Show all unrated movies.


SELECT *
FROM Movies
where Rating is null or Rating = '';
</sql><sql name="4.4">-- Select all movie theatres that are not currently showing a movie.

SELECT *
FROM MovieTheaters
WHERE Movie is null or Movie = '';</sql><sql name="4.5">-- Select all data from all movie theaters and, additionally, 
-- the data from the movie that is being shown in the theater (if one is being shown).


SELECT *
FROM MovieTheaters
FULL JOIN Movies ON Movies.Code = MovieTheaters.Movie
WHERE Movie is not null or Movie != '';</sql><sql name="4.6">-- Select all data from all movies and, if that movie 
-- is being shown in a theater, show the data from the theater.


SELECT *
FROM Movies
FULL JOIN MovieTheaters ON MovieTheaters.Movie = Movies.Code
WHERE Movie is not null or Movie != '';</sql><sql name="4.7">-- Show the titles of movies not currently being shown in any theaters.

ALTER TABLE MovieTheaters 
RENAME COLUMN Code TO MT_Code;


SELECT Title
FROM Movies
LEFT JOIN MovieTheaters ON MovieTheaters.Movie = Movies.Code
WHERE Movie IS NULL;
</sql><sql name="4.8">-- Add an unrated movie with the title: &quot;One, Two, Three&quot;.

DELETE
FROM Movies
WHERE Code=9;


INSERT INTO Movies (Code,Title, Rating)
VALUES(9,'One, Two, Three',NULL);</sql><sql name="4.9">-- Set the rating of all unrated movies to &quot;G&quot;.


UPDATE Movies
SET Rating = 'G'
WHERE Rating ISNULL; </sql><sql name="4.10_?*">-- Remove movie theaters showing movies rated &quot;NC-17&quot;.


DELETE
FROM MovieTheaters
WHERE Movie IN (
	SELECT Movies.Code
	FROM Movies
	INNER JOIN Movies ON Movies.Code = MovieTheaters.Movie
	WHERE Movies.Rating = 'NC-17'
	);

	
-- CAN BE DONE WITH SUBQUERY on WHERE Movie = (SELECT...

	
DELETE
FROM MovieTheaters
LEFT JOIN Movies ON Movies.Code = MovieTheaters.Movie
WHERE Movies.Code = (SELECT Code FROM Movies WHERE Movies.Rating = 'NC-17');

</sql><current_tab id="10"/></tab_sql></sqlb_project>
