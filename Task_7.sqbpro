<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Task_7.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1464"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Package" custom_title="0" dock_id="1" table="4,7:mainPackage"/><dock_state state="000000ff00000000fd00000001000000020000033b00000226fc0100000001fb000000160064006f0063006b00420072006f007700730065003101000000000000033b0000011800ffffff0000033b0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Client" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="97"/><column index="2" value="192"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Employee" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="76"/><column index="2" value="218"/><column index="3" value="122"/><column index="4" value="88"/><column index="5" value="539"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Has_Clearance" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="78"/><column index="2" value="60"/><column index="3" value="74"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Package" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="61"/><column index="2" value="99"/><column index="3" value="162"/><column index="4" value="48"/><column index="5" value="47"/><column index="6" value="60"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Planet" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="57"/><column index="2" value="163"/><column index="3" value="171"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Shipment" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="75"/><column index="2" value="85"/><column index="3" value="57"/><column index="4" value="44"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Create_Fill">-- Create tables


CREATE TABLE Employee (
  EmployeeID INTEGER,
  Name TEXT NOT NULL,
  Position TEXT NOT NULL,
  Salary REAL NOT NULL,
  Remarks TEXT,
  PRIMARY KEY (EmployeeID)
); 

CREATE TABLE Planet (
  PlanetID INTEGER,
  Name TEXT NOT NULL,
  Coordinates REAL NOT NULL,
  PRIMARY KEY (PlanetID)
); 

CREATE TABLE Shipment (
  ShipmentID INTEGER,
  Date DATE,
  Manager INTEGER NOT NULL,
  Planet INTEGER NOT NULL,
  PRIMARY KEY (ShipmentID)
);

CREATE TABLE Has_Clearance (
  Employee INTEGER NOT NULL,
  Planet INTEGER NOT NULL,
  Level INTEGER NOT NULL,
  PRIMARY KEY(Employee, Planet)
); 

CREATE TABLE Client (
  AccountNumber INTEGER,
  Name TEXT NOT NULL,
  PRIMARY KEY (AccountNumber)
);
  
CREATE TABLE Package (
  Shipment INTEGER NOT NULL,
  PackageNumber INTEGER NOT NULL,
  Contents TEXT NOT NULL,
  Weight REAL NOT NULL,
  Sender INTEGER NOT NULL,
  Recipient INTEGER NOT NULL,
  PRIMARY KEY(Shipment, PackageNumber)
);


-- Fill tables

INSERT INTO Client VALUES
(1, 'Zapp Brannigan'),
(2, &quot;Al Gore's Head&quot;),
(3, 'Barbados Slim'),
(4, 'Ogden Wernstrom'),
(5, 'Leo Wong'),
(6, 'Lrrr'),
(7, 'John Zoidberg'),
(8, 'John Zoidfarb'),
(9, 'Morbo'),
(10, 'Judge John Whitey'),
(11, 'Calculon');

INSERT INTO Employee VALUES
(1, 'Phillip J. Fry', 'Delivery boy', 7500.0, 'Not to be confused with the Philip J. Fry from Hovering Squid World 97a'),
(2, 'Turanga Leela', 'Captain', 10000.0, NULL),
(3, 'Bender Bending Rodriguez', 'Robot', 7500.0, NULL),
(4, 'Hubert J. Farnsworth', 'CEO', 20000.0, NULL),
(5, 'John A. Zoidberg', 'Physician', 25.0, NULL),
(6, 'Amy Wong', 'Intern', 5000.0, NULL),
(7, 'Hermes Conrad', 'Bureaucrat', 10000.0, NULL),
(8, 'Scruffy Scruffington', 'Janitor', 5000.0, NULL);


INSERT INTO Planet VALUES
(1, 'Omicron Persei 8', 89475345.3545),
(2, 'Decapod X', 65498463216.3466),
(3, 'Mars', 32435021.65468),
(4, 'Omega III', 98432121.5464),
(5, 'Tarantulon VI', 849842198.354654),
(6, 'Cannibalon', 654321987.21654),
(7, 'DogDoo VII', 65498721354.688),
(8, 'Nintenduu 64', 6543219894.1654),
(9, 'Amazonia', 65432135979.6547);

INSERT INTO Has_Clearance VALUES
(1, 1, 2),
(1, 2, 3),
(2, 3, 2),
(2, 4, 4),
(3, 5, 2),
(3, 6, 4),
(4, 7, 1);

INSERT INTO Shipment VALUES
(1, '3004/05/11', 1, 2),
(2, '3004/05/11', 1, 2),
(3, NULL, 2, 3),
(4, NULL, 2, 4),
(5, NULL, 7, 5);

INSERT INTO Package VALUES
(1, 1, 'Undeclared', 1.5, 1, 2),
(2, 1, 'Undeclared', 10.0, 2, 3),
(2, 2, 'A bucket of krill', 2.0, 8, 7),
(3, 1, 'Undeclared', 15.0, 3, 4),
(3, 2, 'Undeclared', 3.0, 5, 1),
(3, 3, 'Undeclared', 7.0, 2, 3),
(4, 1, 'Undeclared', 5.0, 4, 5),
(4, 2, 'Undeclared', 27.0, 1, 2),
(5, 1, 'Undeclared', 100.0, 5, 1);

</sql><sql name="7.1">-- Select the name of the client that received a 1.5kg package.

SELECT Client.Name
FROM Client
WHERE AccountNumber = (
	SELECT Recipient
	FROM Package
	WHERE Weight = 1.5
	);</sql><sql name="7.2">-- What is the total weight of all the packages sent by that same client?


SELECT SUM(weight) AS total_weight
FROM Package
WHERE Sender = 2;</sql><sql name="7.3_!*">-- Select the names of employees who have clearance level 4 or higher.


-- WORKS 1
SELECT Employee.Name
From Employee
WHERE EmployeeID IN (
	SELECT Has_Clearance.Employee
	FROM Has_Clearance
	WHERE Level = 4
	);

	
-- WORKS 2
SELECT Employee.Name
From Employee
LEFT JOIN Has_Clearance ON Has_Clearance.Employee = Employee.EmployeeID
WHERE Level = 4
</sql><sql name="7.4">-- Rank all employees based on their salary in descending order, 
-- showing their names and positions alongside their rank. 
-- (Try using a Window Function if you are up to the challenge!)

SELECT Name, Position, Salary, dense_rank() OVER (ORDER BY Salary DESC) SalaryRank 
FROM Employee;</sql><sql name="7.5*">-- Create a CTE to calculate the total weight of packages sent to each planet, 
-- then join it with the Planet table to select the planet names and 
-- their corresponding total package weights.

WITH Planet_Package_Total_Weight AS (
	SELECT Shipment.Planet AS PlanetID, SUM(Weight) AS Total_Weight 
	FROM Shipment
	JOIN Package ON Package.Shipment = Shipment.ShipmentID
	GROUP BY Shipment.Planet
)
SELECT Planet.Name, Total_Weight 
FROM Planet_Package_Total_Weight 
JOIN Planet ON Planet_Package_Total_Weight.PlanetID = Planet.PlanetID;





-- WITHOUT CTE..

SELECT Planet.Name, sum(weight) AS total_weight
FROM Package
LEFT JOIN Shipment ON Shipment.ShipmentID = Package.Shipment
LEFT JOIN PLanet ON Planet.PlanetID = Shipment.Planet
Group BY Planet;

</sql><sql name="7.6*">-- Select the names of employees who have shipped packages to planets that no other employee has shipped to.


-- Code to identify planets with only one sender, based on assumption MANAGER = Employee
-- Possibility to do same with UNIQUE function?

Select Shipment.Manager, Shipment.Planet, COUNT(Manager) AS count_sender
FROM Shipment
GROUP BY Shipment.Planet
HAVING count_sender &lt; 2

-- My complete Code, count_sender not relevant
-- How to find out that there are unique combinations only?
-- how to limit output to only one line per name?

Select Shipment.Manager, Employee.Name, Shipment.Planet, COUNT(Manager) AS count_sender
FROM Shipment
JOIN Employee ON Employee.EmployeeID = Shipment.Manager
GROUP BY Shipment.Planet
HAVING count_sender &lt; 2


-- Returns one name twice
Select DISTINCT Shipment.Manager, Employee.Name, Shipment.Planet
FROM Shipment
JOIN Employee ON Employee.EmployeeID = Shipment.Manager
GROUP BY Shipment.Planet
ORDER BY Name
LIMIT 1

-- Try with nested query, but loosing really the test whether combination exists only once...
SELECT DISTINCT Employee.Name
From Employee
WHERE Employee.Name IN (
	Select DISTINCT Employee.Name
	FROM Shipment
	JOIN Employee ON Employee.EmployeeID = Shipment.Manager
	GROUP BY Shipment.Planet
	ORDER BY Name
);


-- LMS solution
SELECT e.Name
FROM Employee e
WHERE e.EmployeeID IN (
    SELECT s.Manager
    FROM Shipment s
    GROUP BY s.Planet
    HAVING COUNT(DISTINCT s.Manager) = 1);
</sql><sql name="7.7*">-- Select the names of planets, along with the number of shipments made to each planet.

SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS count_shipments
FROM Planet
LEFT JOIN Shipment ON Shipment.Planet = PLanet.PlanetID
GROUP BY Planet.Name
HAVING count_shipments &gt; 0;


-- Do the same, but exclude planets where the total weight of packages sent is less than 20 units.
--Step_01_Idendity_Shipments
SELECT Package.Shipment, SUM(Weight) AS total_weight_shipment
FROM Package
GROUP BY Package.Shipment
HAVING total_weight_shipment &lt; 20;

--Step_02_Merge
SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS count_shipments
FROM Planet
LEFT JOIN Shipment ON Shipment.Planet = PLanet.PlanetID
WHERE Shipment.ShipmentID IN (
	SELECT Package.Shipment
	FROM Package
	WHERE Package.Shipment IN 
	(
		SELECT Package.Shipment, SUM(Weight) AS total_weight_shipment
		FROM Package
		GROUP BY Package.Shipment
		HAVING total_weight_shipment &lt; 20
	)
)
GROUP BY Planet.Name
HAVING count_shipments &gt; 0;


-- LMS Solution
SELECT Name, Total_Weight, COUNT(*) AS Shipments
FROM Planet 
JOIN Shipment ON Shipment.Planet = Planet.PlanetID 
JOIN (
	SELECT Shipment.Planet AS PlanetID, SUM(Weight) AS Total_Weight FROM Shipment
	JOIN Package ON Package.Shipment = Shipment.ShipmentID
	GROUP BY Shipment.Planet
) AS subquery ON subquery.PlanetID = Planet.PlanetID
GROUP BY Name
HAVING subquery.Total_Weight &gt; 20;
</sql><current_tab id="7"/></tab_sql></sqlb_project>
